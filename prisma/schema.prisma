generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String
  password      String?
  role          String   // 'student', 'teacher', or 'admin'
  emailVerified Boolean  @default(false)
  image         String?
  status        String   @default("active") // 'active', 'pending', 'rejected'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  approvedBy    String?
  approvedAt    DateTime?
  rejectedBy    String?
  rejectedAt    DateTime?
  provider      String?  // 'credentials' or 'google'

  // Relations
  savedWork     SavedWork[]
  cohorts       Cohort[]    @relation("CohortStudents")
  teachingCohorts Cohort[]  @relation("CohortTeacher")
}

model Cohort {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students  User[]   @relation("CohortStudents")
  teacher   User?    @relation("CohortTeacher", fields: [teacherId], references: [id], onDelete: SetNull)
  teacherId Int?
  work      SavedWork[]
}

model SavedWork {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  screenshot  String   // Base64 encoded image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int
  cohort      Cohort?  @relation(fields: [cohortId], references: [id])
  cohortId    Int?
}

model PendingTeacher {
  id                Int      @id @default(autoincrement())
  email            String   @unique
  name             String
  password         String
  role             String   @default("teacher")
  status           String   @default("pending")
  createdAt        DateTime @default(now())
  verificationToken String   @unique
}
